# -*- coding: utf-8 -*-
"""Monthly Report_streamlit

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MgdHjMz3txogcqA-h8Cy3ec2rShCpk5s
"""

import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import plotly.express as px

st.set_page_config(layout="wide")

st.title("📊 YOY Monthly Report Dashboard")

@st.cache_data
def load_data():
    df24 = pd.read_excel("Processed_Approved_202402.xlsx")
    df25 = pd.read_excel("Processed_Approved_202502.xlsx")
    df24.columns = df24.columns.str.strip().str.lower()
    df25.columns = df25.columns.str.strip().str.lower()
    return df24, df25

df24, df25 = load_data()

# ISO 설명 딕셔너리
iso_dict = {
    111: "LA", 112: "HQ", 121: "OCK", 122: "OCV", 123: "San Jose",
    124: "Seattle", 125: "New York", 126: "Virginia", 128: "Georgia",
    130: "El Monte", 131: "New Jersey", 132: "MM", 133: "Houston",
    135: "San Francisco", 138: "Hawaii", 139: "Chicago", 140: "South Bay",
    143: "GABS", 146: "Dallas", 147: "CRD", 153: "Torrance", 300: "Business Partners"
}

# 계정 유형 정리 함수
def filter_and_classify(df):
    df = df.copy()
    df['account_category'] = df['accounttype'].apply(
        lambda x: 'New account' if str(x).strip().lower() in ['new', 'conversion'] else str(x).strip())
    return df

# 적용
df24 = filter_and_classify(df24)
df25 = filter_and_classify(df25)

# ISO 드롭다운 라벨 만들기
iso_ids = sorted(set(df24['iso'].unique()) | set(df25['iso'].unique()))
iso_labels = [f"{i} - {iso_dict.get(i, str(i))}" for i in iso_ids]
iso_labels.insert(0, "Total")
selected_label = st.selectbox("🔍 Choose ISO", iso_labels)

if selected_label == "Total":
    selected_iso = "Total"
else:
    selected_iso = int(selected_label.split(" - ")[0])

# 피벗 함수
def prepare_pivot(df24, df25, value_col):
    grp_24 = df24.groupby(['iso', 'account_category'])[value_col].sum().unstack(fill_value=0)
    grp_25 = df25.groupby(['iso', 'account_category'])[value_col].sum().unstack(fill_value=0)
    yoy_df = pd.concat([grp_24.add_suffix(' (2024)'), grp_25.add_suffix(' (2025)')], axis=1).fillna(0)
    melted = yoy_df.reset_index().melt(id_vars='iso', var_name='category_year', value_name=value_col)
    melted['category'] = melted['category_year'].str.extract(r'^(.*?) \(')
    melted['year'] = melted['category_year'].str.extract(r'\((\d{4})')
    pivot = melted.pivot(index=['iso', 'category'], columns='year', values=value_col).fillna(0).astype(int).reset_index()
    return pivot

pivot_count = prepare_pivot(df24.assign(dummy=1), df25.assign(dummy=1), 'dummy')
pivot_vol = prepare_pivot(df24, df25, 'monthlyvol')

# 차트 함수 (plotly)
def plot_yoy_chart(df, iso, value_label):
    if iso == "Total":
        temp = df.copy()
        label = "All ISOs"
    else:
        temp = df[df['iso'] == iso].copy()
        label = iso_dict.get(iso, str(iso))

    temp = temp.melt(id_vars='category', value_vars=['2024', '2025'],
                     var_name='Year', value_name=value_label)

    fig = px.bar(
        temp,
        x='category',
        y=value_label,
        color='Year',
        barmode='group',
        title=f"{value_label} - {label}",
        labels={'category': 'Account Type'}
    )

    fig.update_layout(
        height=400,
        xaxis_tickangle=-15,
        title_font_size=16
    )

    st.plotly_chart(fig, use_container_width=True)

    if iso == "Total":
            df_table = df.copy()
        else:
            df_table = df[df['iso'] == iso].copy()

        df_table = df_table.set_index('category')
        df_table['YOY'] = ((df_table['2025'] - df_table['2024']) / df_table['2024'].replace(0, pd.NA)) * 100
        df_table = df_table[['2024', '2025', 'YOY']]
        df_table = df_table.reset_index().round(2)

        st.markdown("### 📊 Data Table")
        st.dataframe(df_table, use_container_width=True)

# 출력
st.subheader("📈 Account Count (YOY)")
plot_yoy_chart(pivot_count, selected_iso, "Number of Accounts")

st.subheader("💰 Volume (YOY)")
plot_yoy_chart(pivot_vol, selected_iso, "Monthly Volume")
